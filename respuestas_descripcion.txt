Athina Salim - asalim@udesa.edu.ar
Como desactivé cada fase de la bomba:

Fase 1:

Esta fase compara el input del usuario con una frase almacenada en memoria. Usando GDB, coloqué un breakpoint en la dirección 0x401de7, 
al comienzo de la función phase_1, y observé que se llamaba a strings_not_equal, pasándole como argumentos el string ingresado y una cadena fija 
almacenada en la dirección contenida en el registro rsi. Para ver cuál era esa frase correcta, imprimí el contenido de esa dirección con 
print (char*)$rsi, lo que me permitió ver exactamente qué esperaba el programa. Como la bomba explota si las frases no coinciden carácter por carácter,
ingresé esa misma frase como input y la fase se desactivó correctamente.

Fase 2:

Esta fase toma tres números como input, los convierte con strtoq y luego hace operaciones entre ellos. 
Usé GDB, coloqué un breakpoint en el comienzo de phase_2 y seguí paso a paso cómo se iban guardando los valores.
Vi que el primer número (a) se guardaba en rbp, el segundo (b) en rbx y el tercero (c) en r12d, y que se hacía un cálculo con xor entre el primero y el segundo,
seguido de un shift a la derecha (sar) para luego comparar ese resultado con el tercer número. Si no coincidían, se llamaba a explode_bomb. 
Vi que el tercer número era pasado a una función llamada misterio, y que ahí explotaba si el valor era no negativo.
Entonces resumiendo, el input debía cumplir dos condiciones: el tercer número (c) tenía que ser igual a (a ^ b) >> 1 y ser negativo. 
Probando, encontré que el input -1 0 -1 cumple con ambas, y así logré desactivar la fase.

Fase 3:

Esta fase toma una palabra y un número como input, y realiza una búsqueda binaria sobre un arreglo de strings cargados desde un archivo.
Usé GDB y puse un breakpoint en la instrucción donde se llama a strcmp (en la dirección 0x401fe7, dentro de cuenta) para ver qué palabra se estaba
comparando en cada iteración. También imprimí el valor en la dirección apuntada por el registro r8, que actúa como contador de llamadas recursivas, 
con *(int*)$r8. Analizando el código, observé que la bomba explotaba si la palabra se encontraba en 6 o menos iteraciones, o en más de 11, 
por lo que debía acertar entre las iteraciones 7 y 11. Usé un breakpoint condicional con break *0x401fe7 if *(int*)$r8 == 9 para frenar justo en 
la iteración 9, y luego con print (char*)$rsi descubrí que la palabra comparada en ese paso era "sesionar". Finalmente, ingresando "sesionar 9" 
como input, desactivé correctamente la fase.

Fase 4:

Esta fase pedía ingresar una cadena de 6 caracteres. Usé GDB y coloqué un breakpoint al inicio de phase_4 (en 0x402138) para ver qué hacía el código.
Ahí encontré que el input se recorría letra por letra, y a cada carácter se le aplicaba un & 15 para obtener un índice entre 0 y 15.
Ese índice se usaba para acceder a un arreglo de enteros que se cargaba en el registro rsi. Para ver el contenido de ese arreglo, imprimí x/16dw $rsi 
y vi que contenía una matriz de valores. El código iba sumando los números del arreglo que correspondían a los índices generados por las letras del 
input, y si la suma total no daba 45, explotaba la bomba. A partir de eso, busqué una combinación de 6 valores del arreglo que sumaran 45, y luego
elegí letras tales que su código ASCII al hacer & 15 me diera los índices correctos. Encontré que el input "eeeepj" funcionaba, y así 
desactivé la fase.

Fase Secreta:

Como la encontré: 
Para descubrir cómo acceder a la fase secreta, observé que en el main se llamaba a la función phase_defused después de completar cada fase. 
Por eso, decidí poner un breakpoint en esa función con la idea de interceptar su ejecución y analizar qué ocurría luego de cada fase. 
Fui ingresando inputs normalmente: primero para la fase 1, después para la 2, y cuando llegué a la fase 3, 
escribí su input que habia averiguado antes junto con una palabra cualquiera (puse bob), hice esto porque en una parte del código de phase_defused,
se hacía un sscanf con el formato "%s %d %s" y como ya sabía que la fase 3 requería un input del tipo "%s %d", intuí que ahi podía llegar a poner
una palabra más. Después, ingresé el input de la fase 4. Al completarla, se activó el breakpoint en phase_defused (esto sucedió post resolver cada
fase e iba avanzando con next para poder continuar con los inputs de las otras fases). Desde ahí, empecé a ejecutar la instrucción ni varias veces.
Cada vez que aparecía una llamada a strings_not_equal, usaba el comando x/s $rsi para inspeccionar qué string estaba siendo comparado. 
Así, tras varias iteraciones con ni, llegué a una línea clave en la que rsi apuntaba a la cadena "abrete_sesamo". Ingrese en la fase 3 mi input 
de siempre junto a abrete_sesamo y desbloquee la fase secreta. 

Como la desactivé:

Para desactivar la bomba en la fase secreta, primero observé qué hacía la función secret_phase. Lo que hacia era tomar un número como input, 
lo convertía con strtoq y lo pasaba como argumento a la función fun7, junto con un puntero (n1) (raíz de un árbol binario). 
A partir de esto, decidí poner un breakpoint en secret_phase para analizar qué ocurría en la terminal. Una vez dentro, dejé continuar la ejecución 
hasta ingresar a fun7 (o sea coloqué otro breakpoint en fun7).
Viendo la lógica de fun7, entendí que la función recorría el árbol binario comparando el número ingresado con los valores de los nodos. 
Si el número era menor, descendía por la izquierda multiplicando por 2 el valor acumulado; si era mayor, iba por la derecha, y luego sumaba 1 tras 
multiplicar. El valor retornado debía ser exactamente 1, lo cual implicaba que la única forma de lograrlo era tomar una sola rama a la derecha desde 
la raíz, ya que 2×0 + 1 = 1.
Entonces en terminal primero vi el valor del nodo raíz con x/wx $rdi, y luego seguí su puntero derecho con x/wx $rdi+16, que me dio la dirección 
0x4f9230. Finalmente, imprimí el contenido de esa dirección con x/wx 0x4f9230 y encontré el valor 0x32, equivalente a 50 en decimal. 
Ese fue el número que ingresé como input, y gracias a este razonamiento, logré desactivar la fase secreta.
